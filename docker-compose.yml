services:
  
  # PHP
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: thomz/php
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      # host:container
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - db
      - minio

  # Container separado com finalidade de executar comandos para a inicialização do projeto laravel
  php_commands:
    image: thomz/php
    container_name: php_commands
    restart: "no"
    tty: true
    command: sh -c "composer install && php artisan key:generate && php artisan migrate:fresh && php artisan config:clear"
    # entrypoint: /bin/sh -c "composer install && php artisan key:generate && php artisan migrate && php artisan config:clear"
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network
    depends_on:
      - app
    
  # NPM
  npm:  
    image: node:latest
    container_name: npm
    restart: "no"
    tty: true
    working_dir: /var/www
    command: sh -c "npm install && npm run build"
    volumes: 
      - "./:/var/www"
    networks:
      - app-network
    depends_on:
      - app # depends of php to build front-end

  # Nginx
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      # - "8989:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./nginx/:/etc/nginx/conf.d/
    networks:
      - app-network
    depends_on:
      - app

  # MySQL
  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
    networks:
      - app-network

  # MinIO
  minio:
    image: 'bitnami/minio:latest'
    ports:
      - '8900:8900'
      - '9004:9004'
    networks:
      - app-network
    volumes:
      - './minio:/data/minio'
    environment:
      - MINIO_ROOT_USER=thomz
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DEFAULT_BUCKETS=mdwitter
      - MINIO_API_PORT_NUMBER=8900
      - MINIO_CONSOLE_PORT_NUMBER=9004
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8900/minio/health/live"]
      retries: 3
      timeout: 5s

#Networks
networks:
  app-network:
    driver: bridge
    
#Volumes
volumes:
  dbdata:
    driver: local
